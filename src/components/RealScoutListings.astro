<div class="realscout-container">
  <div class="loading-overlay" id="loading">
    <div class="spinner"></div>
    <p>Loading properties...</p>
  </div>
  
  <div class="error-state hidden" id="error">
    <p>Unable to load properties</p>
    <button onclick="retryLoad()">Retry</button>
  </div>

  <realscout-office-listings 
    id="realscout-widget"
    agent-encoded-id="QWdlbnQtMjI1MDUw" 
    sort-order="PRICE_LOW" 
    listing-status="For Sale" 
    property-types="MF,SFR" 
    price-min="500000"
  ></realscout-office-listings>
</div>

<script>
  // Initialize widget when it becomes visible
  document.addEventListener('DOMContentLoaded', function() {
    const widget = document.getElementById('realscout-widget');
    const loading = document.getElementById('loading');
    const error = document.getElementById('error');

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          loading?.classList.remove('hidden');
          widget?.setAttribute('data-load', 'true');
          observer.disconnect();
        }
      });
    }, { threshold: 0.5 });

    if (widget) {
      observer.observe(widget);

      // Handle widget events
      widget.addEventListener('load', () => {
        loading?.classList.add('hidden');
      });

      widget.addEventListener('error', (e) => {
        loading?.classList.add('hidden');
        error?.classList.remove('hidden');
      });
    }
  });

  // Retry loading function
  function retryLoad() {
    const widget = document.getElementById('realscout-widget');
    const loading = document.getElementById('loading');
    const error = document.getElementById('error');

    if (widget) {
      error?.classList.add('hidden');
      loading?.classList.remove('hidden');
      widget.setAttribute('data-load', 'true');
    }
  }
</script>

<style>
  .realscout-container {
    width: 100%;
    max-width: var(--container-max-width);
    margin: 0 auto;
    padding: var(--container-padding);
    position: relative;
    min-height: 480px;
  }

  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.9);
    z-index: 10;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--color-background);
    border-top-color: var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  .error-state {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .error-state button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .hidden {
    display: none;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style> 