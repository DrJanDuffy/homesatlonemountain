---
// SmartFeatures.astro
---

interface Props {
  showVoiceCommands?: boolean;
}

const { showVoiceCommands = true } = Astro.props;

const features = [
  {
    id: 'search',
    title: 'Smart Property Search',
    description: 'Advanced AI-powered search that understands your preferences and lifestyle needs.',
    icon: 'search'
  },
  {
    id: '360',
    title: 'Immersive Virtual Tours',
    description: '360Â° virtual tours and detailed photo galleries of every property.',
    icon: '360'
  },
  {
    id: 'insights',
    title: 'Las Vegas Market Insights',
    description: 'Real-time market data and trends to make informed decisions.',
    icon: 'insights'
  },
  {
    id: 'tour',
    title: 'Same-Day Tours',
    description: 'Schedule in-person viewings instantly with our local agents.',
    icon: 'tour'
  }
];

const voiceCommands = [
  'Show me homes in Lone Mountain under $500,000',
  'Find houses with a pool and mountain view',
  'What are the newest listings in 89129?',
  'Schedule a tour for tomorrow afternoon'
];

<section class="smart-features">
  <div class="features-container">
    <h2>Smart Home Search Features</h2>
    <p class="subtitle">Discover your dream home with our cutting-edge tools</p>
    
    <div class="feature-grid">
      {features.map(feature => (
        <div class="feature-card" data-feature={feature.id}>
          <div class="icon-wrapper">
            <svg class="feature-icon" aria-hidden="true">
              <use href={`/images/feature-icons.svg#icon-${feature.icon}`}></use>
            </svg>
          </div>
          <h3>{feature.title}</h3>
          <p>{feature.description}</p>
        </div>
      ))}
    </div>

    {showVoiceCommands && (
      <div class="voice-commands">
        <div class="voice-tutorial">
          <div class="voice-icon-wrapper">
            <svg class="voice-icon" aria-hidden="true">
              <use href="/images/feature-icons.svg#icon-voice"></use>
            </svg>
          </div>
          <div class="voice-content">
            <h3>Try Voice Commands</h3>
            <p>Speak naturally to search properties</p>
            <div class="command-examples">
              {voiceCommands.map(command => (
                <div class="command-pill">"{command}"</div>
              ))}
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</section>

<style>
  .smart-features {
    position: relative;
    padding: 4rem 1rem;
    background: url('/images/mountain-pattern.svg') no-repeat center center;
    background-size: cover;
    overflow: hidden;
  }

  .features-container {
    max-width: 1200px;
    margin: 0 auto;
  }

  h2 {
    font-size: 2.5rem;
    text-align: center;
    color: var(--color-text-primary);
    margin-bottom: 1rem;
  }

  .subtitle {
    text-align: center;
    color: var(--color-text-secondary);
    font-size: 1.2rem;
    margin-bottom: 3rem;
  }

  .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .feature-card {
    background: var(--color-background-card);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .feature-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
  }

  .icon-wrapper {
    background: var(--color-primary-light);
    width: 3rem;
    height: 3rem;
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1.5rem;
  }

  .feature-icon {
    width: 1.5rem;
    height: 1.5rem;
    color: var(--color-primary);
  }

  .feature-card h3 {
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
    color: var(--color-text-primary);
  }

  .feature-card p {
    color: var(--color-text-secondary);
    line-height: 1.6;
  }

  .voice-commands {
    margin-top: 4rem;
    padding: 2rem;
    background: var(--color-background-card);
    border-radius: 1rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }

  .voice-tutorial {
    display: flex;
    align-items: flex-start;
    gap: 2rem;
  }

  .voice-icon-wrapper {
    background: var(--color-primary);
    width: 4rem;
    height: 4rem;
    border-radius: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .voice-icon {
    width: 2rem;
    height: 2rem;
    color: white;
  }

  .voice-content {
    flex-grow: 1;
  }

  .voice-content h3 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
  }

  .voice-content p {
    color: var(--color-text-secondary);
    margin-bottom: 1.5rem;
  }

  .command-examples {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .command-pill {
    background: var(--color-primary-light);
    color: var(--color-primary);
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    font-size: 0.875rem;
    transition: background-color 0.2s ease;
  }

  .command-pill:hover {
    background: var(--color-primary-lighter);
  }

  @media (max-width: 768px) {
    .voice-tutorial {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .command-examples {
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    h2 {
      font-size: 2rem;
    }

    .feature-grid {
      grid-template-columns: 1fr;
    }

    .voice-commands {
      padding: 1.5rem;
    }
  }
</style>

<script>
  // Initialize IntersectionObserver for feature card animations
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('feature-visible');
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.2,
    rootMargin: '50px'
  });

  // Observe all feature cards
  document.querySelectorAll('.feature-card').forEach(card => {
    observer.observe(card);
  });

  // Add keyboard navigation for voice command pills
  document.querySelectorAll('.command-pill').forEach(pill => {
    pill.setAttribute('tabindex', '0');
    pill.setAttribute('role', 'button');
    
    pill.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        // Trigger voice command (to be implemented)
        console.log('Voice command triggered:', pill.textContent);
      }
    });
  });
</script> 