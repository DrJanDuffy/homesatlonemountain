---
// SmartFeatures.astro
interface Props {
  showVoiceCommands?: boolean;
}

const { showVoiceCommands = true } = Astro.props;

const features = [
  {
    id: 'search',
    title: 'Smart Property Search',
    description: 'Advanced AI-powered search that understands your preferences and lifestyle needs.',
    icon: 'search',
    voiceExample: 'Show me homes in Lone Mountain under $500,000'
  },
  {
    id: '360',
    title: 'Immersive Virtual Tours',
    description: '360Â° virtual tours and detailed photo galleries of every property.',
    icon: '360',
    voiceExample: 'Find houses with a pool and mountain view'
  },
  {
    id: 'insights',
    title: 'Las Vegas Market Insights',
    description: 'Real-time market data and trends to make informed decisions.',
    icon: 'insights',
    voiceExample: 'What are the newest listings in 89129?'
  },
  {
    id: 'tour',
    title: 'Same-Day Tours',
    description: 'Schedule in-person viewings instantly with our local agents.',
    icon: 'tour',
    voiceExample: 'Schedule a tour for tomorrow afternoon'
  }
];

const voiceCommands = [
  'Show me homes in Lone Mountain under $500,000',
  'Find houses with a pool and mountain view',
  'What are the newest listings in 89129?',
  'Schedule a tour for tomorrow afternoon'
];
---

<section class="smart-features" id="features">
  <div class="features-container">
    <h2>Smart Home Search Features</h2>
    <p class="subtitle">Discover your dream home with our cutting-edge tools</p>
    
    <div class="feature-grid">
      {features.map(feature => (
        <div class="feature-card" data-feature={feature.id}>
          <div class="icon-wrapper">
            <svg class="feature-icon" aria-hidden="true">
              <use href={`/images/feature-icons.svg#icon-${feature.icon}`}></use>
            </svg>
          </div>
          <h3>{feature.title}</h3>
          <p>{feature.description}</p>
          {showVoiceCommands && (
            <div class="voice-example">
              <button class="voice-trigger" data-command={feature.voiceExample}>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
                  <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
                  <line x1="12" y1="19" x2="12" y2="23"></line>
                  <line x1="8" y1="23" x2="16" y2="23"></line>
                </svg>
                Try: "{feature.voiceExample}"
              </button>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .smart-features {
    position: relative;
    padding: 4rem 1rem;
    background: var(--color-background-secondary);
    overflow: hidden;
  }

  .features-container {
    max-width: 1200px;
    margin: 0 auto;
  }

  h2 {
    font-size: 2.5rem;
    text-align: center;
    color: var(--color-text-primary);
    margin-bottom: 1rem;
  }

  .subtitle {
    text-align: center;
    color: var(--color-text-secondary);
    font-size: 1.2rem;
    margin-bottom: 3rem;
  }

  .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .feature-card {
    background: var(--color-background-card);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    opacity: 0;
    transform: translateY(20px);
  }

  .feature-card.feature-visible {
    opacity: 1;
    transform: translateY(0);
  }

  .feature-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
  }

  .icon-wrapper {
    background: var(--color-primary-light);
    width: 3rem;
    height: 3rem;
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1.5rem;
  }

  .feature-icon {
    width: 1.5rem;
    height: 1.5rem;
    color: var(--color-primary);
  }

  .feature-card h3 {
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
    color: var(--color-text-primary);
  }

  .feature-card p {
    color: var(--color-text-secondary);
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  .voice-example {
    margin-top: auto;
  }

  .voice-trigger {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--color-primary-light);
    color: var(--color-primary);
    border: none;
    border-radius: 2rem;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    width: 100%;
  }

  .voice-trigger:hover {
    background: var(--color-primary-lighter);
  }

  .voice-trigger svg {
    flex-shrink: 0;
  }

  @media (max-width: 768px) {
    h2 {
      font-size: 2rem;
    }

    .feature-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Initialize IntersectionObserver for feature card animations
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('feature-visible');
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.2,
    rootMargin: '50px'
  });

  // Observe all feature cards
  document.querySelectorAll('.feature-card').forEach(card => {
    observer.observe(card);
  });

  // Handle voice command triggers
  document.querySelectorAll('.voice-trigger').forEach(trigger => {
    trigger.addEventListener('click', () => {
      const command = trigger.dataset.command;
      const voiceSearchButton = document.querySelector('.voice-search-button');
      
      if (voiceSearchButton && 'webkitSpeechRecognition' in window) {
        // Simulate voice command
        voiceSearchButton.click();
        
        // After a brief delay, trigger the RealScout search
        setTimeout(() => {
          const realscoutOverlay = document.getElementById('realscoutOverlay');
          const propertyShowcase = document.getElementById('propertyShowcase');
          const realscoutWidget = document.querySelector('realscout-office-listings');
          
          if (realscoutOverlay && propertyShowcase && realscoutWidget) {
            realscoutOverlay.classList.add('active');
            document.body.style.overflow = 'hidden';
            propertyShowcase.style.display = 'none';

            // Parse command and set RealScout attributes
            if (command.match(/(\d+)\s*bed/)) {
              realscoutWidget.setAttribute('min-beds', command.match(/(\d+)\s*bed/)[1]);
            }
            if (command.includes('pool')) {
              realscoutWidget.setAttribute('features', 'pool');
            }
            if (command.includes('view') || command.includes('mountain')) {
              realscoutWidget.setAttribute('features', 'mountain-view');
            }
          }
        }, 1500);
      }
    });
  });
</script> 